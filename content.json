{"meta":{"title":"WG's Lakeside","subtitle":"只是想显点粗浅技艺，那是我的初衷","description":null,"author":"Ticat","url":"onegoon.store","root":"/"},"pages":[],"posts":[{"title":"Django入门","slug":"Django入门","date":"2020-02-28T02:39:28.000Z","updated":"2020-02-28T11:55:03.466Z","comments":true,"path":"2020/02/28/Django入门/","link":"","permalink":"onegoon.store/2020/02/28/Django入门/","excerpt":"","text":"资料https://tutorial.djangogirls.org/zh/ 一个gitbook，难度较低的教程，如果有基础不建议看 https://github.com/TwoWater/Python 国人写的教程，能够快速了解陌生的信息 https://docs.djangoproject.com/ 官方文档，更新较为即时，语言可选中文。 https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/ 新人友善的博客，带你一步一步完成一个论坛类的project 17年写的有些东西需要更新。","categories":[],"tags":[{"name":"python, django","slug":"python-django","permalink":"onegoon.store/tags/python-django/"}]},{"title":"19年总结","slug":"19年总结","date":"2019-12-31T15:22:21.000Z","updated":"2019-12-31T15:24:47.970Z","comments":true,"path":"2019/12/31/19年总结/","link":"","permalink":"onegoon.store/2019/12/31/19年总结/","excerpt":"","text":"工作上技术长进学会了如何团队开发 iOS的技能点 点的比较多 ​ 单元测试写了不少，对单元测试有了另一番的理解感悟，code容易片面，test来补全 ​ Swift 较为精进毕竟日常开发，编译了Swift并阅读了部分源码，如网络部分，json解析，数据结构部分等 ​ Darwin-xnu, pthread, dyld, Foundation.混个面熟吧。 ​ 从头跟了MonkeyDev的逆向，会使用逆向工具，更加了解了iOS&amp;macOS的运行机制， ​ 对MachO的解析也实践了一段，配合阅读《程序员的自我修养》《深入理解计算系统》。 ​ 汇编，要想理解、验证一些底层的东西还是绕不开汇编的。但是Risc实在太精简了 数据结构与算法，多数的还处于思想上。能手写的只有那几个排序，，base huffman实现了一个解压缩算法 操作系统也学了些，了解CPU的一些机制流水线，多发射，超标量，分支预测，多核协作等。 网络 组内分享了一次TCP/IP，继续阅读POSIX的源码，目前仅完成了用户态 socket的demo，其实还是在应用层。后续要深入到内核态看看。 Wireshark真是个好东西，大家能看到的才有说服力。 生活上程序员离开了电脑如丧失了大脑，编码之外的其他人情世故似乎不差了不少。（也仅可能是我吧，个人感受）。 跑了不少次医院，对医院的流程，对世故的处理有所感悟 篮球，年龄将长，身体越发虚弱~~··。适当锻炼，身体倍棒，远离CS 马上要见家长了，紧张","categories":[],"tags":[]},{"title":"mac socket","slug":"mac-socket","date":"2019-12-27T08:14:01.000Z","updated":"2019-12-29T15:06:49.204Z","comments":true,"path":"2019/12/27/mac-socket/","link":"","permalink":"onegoon.store/2019/12/27/mac-socket/","excerpt":"","text":"### 套接字接口的起源 套接字接口是加州大学伯克利分校的研究员在20世纪80年代早期提出来的。因为这个原因，它也常被叫做伯克利套接字。伯克利的研究者使得套接字接口适用于任何底层的协议。第一个实现的就是针对TCP/IP协议的，他们把它包括在Unix 4.2BSD的内核里，并且分发给许多学校和实验室。这在因特网的历史上是一个重大事件。几乎一夜之间，成千上万的人们接触到了TCP/IP和它的源代码。它引起了巨大的轰动，并激发了新的网络和网络互联研究的浪潮 节选自 《深入理解计算机系统》第三版 伯克利 Berkeley Core Foundation通过CFNetwork提供了封装套接字的CFSocket和CFStream，此外还进一步提供了一些协议的封装，例如CFFTP、CFHTTP等 BSD套接字是XNU中所有网络组件的核心 socket 函数客户端和服务器使用socket函数来创建一个套接字描述符 在&lt;sys/socket.h&gt;中定义int socket(int, int, int); 在bsd&gt;kern&gt;syscalls.master 中97 AUE_SOCKET ALL { int socket(int domain, int type, int protocol); } 若成功则为非负描述符，若出错则为-1 12345678910/** domain 套接字域（地址/协议族）通常指的是 AF（Address Family）或者PF(Protocol Family)表示第2层或第3层地址对应的套接字地址模式。常见的IP协议，即PF_INET或AF_INET传统上使用的是AF_*常量，PF_*常量只不过是通过AF_*常量#define得到的* type * protocol 所在文件bsd &gt; netinet &gt; in.h Xcode里面也能看见注释*/int socket(int domain, int type, int protocol) 1234567891011// socket.h 114~123/* * Types */#define SOCK_STREAM 1 /* stream socket */#define SOCK_DGRAM 2 /* datagram socket */#define SOCK_RAW 3 /* raw-protocol interface */#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)#define SOCK_RDM 4 /* reliably-delivered message */#endif /* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */#define SOCK_SEQPACKET 5 /* sequenced packet stream */ 123456789101112131415// socket.h 528~586/* * Address families. */#define AF_UNSPEC 0 /* unspecified */#define AF_UNIX 1 /* local to host (pipes) */#if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)#define AF_LOCAL AF_UNIX /* backward compatibility */#endif /* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */#define AF_INET 2 /* internetwork: UDP, TCP, etc. */...#define AF_INET6 30 /* IPv6 */... 1234567891011// socket.h 632~680/* * Protocol families, same as address families for now. */#define PF_UNSPEC AF_UNSPEC#define PF_LOCAL AF_LOCAL#define PF_UNIX PF_LOCAL /* backward compatibility */#define PF_INET AF_INET...#define PF_INET6 AF_INET6...","categories":[],"tags":[{"name":"socket","slug":"socket","permalink":"onegoon.store/tags/socket/"}]},{"title":"Mac app socket server","slug":"Mac-app-socket-server","date":"2019-12-26T08:24:57.000Z","updated":"2019-12-27T01:24:50.949Z","comments":true,"path":"2019/12/26/Mac-app-socket-server/","link":"","permalink":"onegoon.store/2019/12/26/Mac-app-socket-server/","excerpt":"在macOS app 上创建socket server 发现创建失败 抛出异常代码如下 1try checkNotMinus1&#123; Darwin.bind(ipv4Socket, addrPtr, UInt32(MemoryLayout&lt;sockaddr_in&gt;.size)) 123456789/// 封装检测是否为-1/// errno 为Darwin的错误码enum SocketError: Error &#123; case socketCreateFailed(Int32) &#125;@discardableResultfunc checkNotMinus1(_ f: () -&gt; Int32) throws -&gt; Int32 &#123; let r = f() guard r != -1 else &#123; throw SocketError.socketCreateFailed(errno) &#125; return r&#125; catch中的error 为ssocketCreateFailed(1) 也就是errno为1","text":"在macOS app 上创建socket server 发现创建失败 抛出异常代码如下 1try checkNotMinus1&#123; Darwin.bind(ipv4Socket, addrPtr, UInt32(MemoryLayout&lt;sockaddr_in&gt;.size)) 123456789/// 封装检测是否为-1/// errno 为Darwin的错误码enum SocketError: Error &#123; case socketCreateFailed(Int32) &#125;@discardableResultfunc checkNotMinus1(_ f: () -&gt; Int32) throws -&gt; Int32 &#123; let r = f() guard r != -1 else &#123; throw SocketError.socketCreateFailed(errno) &#125; return r&#125; catch中的error 为ssocketCreateFailed(1) 也就是errno为1 ⌘左键 进入代码定义（Jump to Definition） 发现只有定义没有注释，能看到他是定义在Darwin中 打开Darwin-xnu 找到errno.h (&lt;sys/errno.h&gt;) 发现错误码为1 对应 Operation not permitted 我是使用Xcode的版本 Version 11.2.1 (11B500) 新版Xcode会把app 的能力单独一页列出来 当我勾选Network 的 Server选项后 bind成功了","categories":[],"tags":[{"name":"Mac OS","slug":"Mac-OS","permalink":"onegoon.store/tags/Mac-OS/"}]},{"title":"SF Symbols","slug":"SF-Symbols","date":"2019-12-26T05:06:06.000Z","updated":"2019-12-26T05:56:36.424Z","comments":true,"path":"2019/12/26/SF-Symbols/","link":"","permalink":"onegoon.store/2019/12/26/SF-Symbols/","excerpt":"SF Symbols Mac上的一款app 有超1500个符号可供使用，也可以自定义符号 可以导出文件，用sketch编辑","text":"SF Symbols Mac上的一款app 有超1500个符号可供使用，也可以自定义符号 可以导出文件，用sketch编辑 UIKit 提供了两种API，一种是使用系统符号，另外一种是自定义 init(systemName:) init(systemName:compatibleWith:) init(systemName:withConfiguration:)methods of UIImage. init(named:) init(named:in:compatibleWith:) init(named:in:with:) 1let image = UIImage(systemName: \"square.and.arrow.up\") image 会加载对应的符号 也可以自定义符号 Assets.xcassets / + / New Symbol Image Set / 拖拽编辑好的SVG文件到xcode中 效果如图 1let image = UIImage(systemName: \"arrowupfill\") #####link refer Creating Custom Symbol Images for Your App","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"onegoon.store/tags/iOS/"}]},{"title":"iOS URLSession Request","slug":"iOS-URLSession-Request","date":"2019-11-27T15:14:13.000Z","updated":"2019-11-27T16:22:22.736Z","comments":true,"path":"2019/11/27/iOS-URLSession-Request/","link":"","permalink":"onegoon.store/2019/11/27/iOS-URLSession-Request/","excerpt":"概览","text":"概览 参考资料 Foundation","categories":[],"tags":[]},{"title":"抓包","slug":"抓包","date":"2019-10-01T07:25:18.000Z","updated":"2019-12-26T09:18:01.212Z","comments":true,"path":"2019/10/01/抓包/","link":"","permalink":"onegoon.store/2019/10/01/抓包/","excerpt":"网络已成为当下人类的必需品，身为开发人员势必了解其原理，无论是正向开发，抑或是逆向攻击。 网络抓包，是对网络传输中的数据包进行抓取。而后可对其进行分析。 正向开发中，我们可以通过抓包进行验证发送的数据是否正确，如验证发送的次数，host，path，header等。 也可以对特定的请求模拟给出特定的响应结果，检查发送端在得到响应后的行为是否符合预期，比如验证一些业务场景极少发生的场景以及边界等。","text":"网络已成为当下人类的必需品，身为开发人员势必了解其原理，无论是正向开发，抑或是逆向攻击。 网络抓包，是对网络传输中的数据包进行抓取。而后可对其进行分析。 正向开发中，我们可以通过抓包进行验证发送的数据是否正确，如验证发送的次数，host，path，header等。 也可以对特定的请求模拟给出特定的响应结果，检查发送端在得到响应后的行为是否符合预期，比如验证一些业务场景极少发生的场景以及边界等。 抓包工具Charles (青花瓷/花瓶)Charles 支持截取 HTTP/HTTPS Charles 抓包原理是将自己设为代理。 代理相当于一个中间人 ​ 客户端发送的所有数据都会先通过代理，然后由代理发送给服务器。 ​ 服务器收到请求后，将相应消息返回给代理，然后由代理发送给客户端。 对客户端来说代理就是服务器，对服务器来说代理就是客户端，所以两者都不会感知网络被拦截了。这就是中间人攻击的原理。 拦截iPhone上的网络请求 将Charles的代理功能打开 设置代理并勾选”Enable transparent HTTP proxying” 查看ip， Help -&gt; Local IP Address . 或者去网络设置中去查看，如今可以看到两种地址，短的是IPv4,长的是IPv6. 在iphone上，设置网络代理为Charles启动的代理服务器。","categories":[],"tags":[{"name":"http","slug":"http","permalink":"onegoon.store/tags/http/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-05-28T14:39:18.000Z","updated":"2019-05-28T14:39:18.000Z","comments":true,"path":"2019/05/28/hello-world/","link":"","permalink":"onegoon.store/2019/05/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}